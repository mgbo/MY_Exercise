'''
По умолчанию атрибуты в классах являются общедоступными.
A это значит, что из любого места программы мы можем получить атрибут объекта и изменить его.
Например:
'''

class Person:
	def __init__(self, name, age):
		self.name = name # устанавливаем имя
		self.age = age # устанавливаем возраст

	def display_info(self):
		print ("Имя : ",self.name,"\t возраст : ",self.age)


tom = Person("Tom", 23)
tom.name = "Человек-паук"       # изменяем атрибут name
tom.age = -129                  # изменяем атрибут age
tom.display_info()              # Имя: Человек-паук     Возраст: -129

"""
В данном случае мы можем, к примеру, присвоить возрасту или имени человека некорректное значение,
например, указать отрицательный возраст. Подобное поведение нежелательно,
поэтому встает вопрос о контроле за доступом к атрибутам объекта.

Касательно инкапсуляции непосредственно в языке программирования Python 
скрыть атрибуты класса можно сделав их приватными или закрытыми 
и ограничив доступ к ним через специальные методы, которые еще называются свойствами.

Изменим выше определенный класс, определив в нем свойства:
"""

class Person_1:
	def __init__(self, name, age):
		self.__name = name # устанавливаем имя
		self.__age = age # устанавливаем возраст

	def set_age(self, age):
		if age in range(1,100):
			self.__age = age
		else:
			print ('Недопустимый возраст')

	def get_age(self):
		return self.__age

	def get_name(self):
		return self.__name

	def display_info(self):
		print ("Имя : ",self.__name,"\t возраст : ",self.__age)


tom = Person_1("Tom", 25)
 
tom.__age = 43              # Атрибут age не изменится
print (tom.get_age())		# 25
tom.display_info()          # Имя: Tom  Возраст: 23


tom.set_age(-3486)          # Недопустимый возраст
tom.set_age(30)
tom.display_info()          # Имя: Tom  Возраст: 25
		















































